{"version":3,"sources":["firebase/config.js","reducers/authReducer.js","Context/authContext.js","App/Nav.js","reducers/postsReducer.js","Context/postsContext.js","App/Main.js","App/Signin.js","App/Login.js","App/Create.js","App/Post.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["config","firebase","this","auth","db","storage","email","password","signInWithEmailAndPassword","catch","err","console","log","user","createUserWithEmailAndPassword","signOut","logout","Promise","resolve","onAuthStateChanged","postsArray","collection","get","forEach","doc","push","id","data","postid","post","postData","storageRef","ref","storageChild","child","cover","name","put","postCover","getDownloadURL","downloadURL","fileRef","location","path","newPost","tittle","content","fileref","add","firestorePost","delete","updatedPost","set","merge","firebaseAuth","state","action","type","payload","Auth","React","createContext","initialState","withRouter","props","useState","userState","setUserState","userEmail","setUserEmail","useContext","dispatch","useEffect","getUserState","then","buttons","hasOwnProperty","Fragment","className","onClick","history","replace","to","posts","Posts","a","async","getPosts","map","key","style","backgroundImage","Signin","setEmail","setPassword","routeRedirect","setRouteRedirect","onSubmit","e","preventDefault","signin","response","message","htmlFor","onChange","target","value","Login","login","createForm","setTittle","setContent","setCover","isBusy","setIsBusy","setRedirect","createPost","files","Post","currentPost","editButton","deleteButton","timer","setTimer","editMode","setEditMode","setPost","tittleRef","useRef","contentRef","setPostId","match","params","getPost","_post","setTimeout","updateForm","deletePost","current","length","updatePost","defaultValue","src","alt","Routes","exact","component","Main","Create","App","Boolean","window","hostname","ReactDOM","render","useReducer","Provider","children","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b82cdf7.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\n\r\nconst config = {\r\n// firebase sdk snippet\r\n}\r\n\r\nclass Firebase{\r\n\r\n  constructor(){\r\n    firebase.initializeApp(config);\r\n    this.auth = firebase.auth();\r\n    this.db = firebase.firestore();\r\n    this.storage = firebase.storage();\r\n  }\r\n\r\n  //Login\r\n  async login(email, password){\r\n    const user = await firebase.auth().signInWithEmailAndPassword(email, password).catch(err => {\r\n      console.log(err);\r\n      return err;\r\n    });\r\n    return user;\r\n  }\r\n\r\n  //Signin\r\n  async signin(email, password){\r\n    const user = await firebase.auth().createUserWithEmailAndPassword(email, password).catch(err => {\r\n      console.log(err);\r\n      return err;\r\n    });\r\n    return user;\r\n  }\r\n\r\n  //LogOut\r\n  async logout(){\r\n    const logout = await firebase.auth().signOut().catch(err => {\r\n      console.log(err);\r\n      return err;\r\n    });\r\n    return logout;\r\n  }\r\n\r\n  async getUserState(){\r\n    return new Promise(resolve => {\r\n      this.auth.onAuthStateChanged(resolve);\r\n    });\r\n  }\r\n\r\n  async getPosts(){\r\n    let postsArray = [];\r\n    const posts = await firebase.firestore().collection(\"Posts\").get();\r\n    posts.forEach(doc => {\r\n      postsArray.push({id:doc.id, data:doc.data()});\r\n    });\r\n    return postsArray;\r\n  }\r\n\r\n  async getPost(postid){\r\n    const post = await firebase.firestore().collection(\"Posts\").doc(postid).get();\r\n    const postData = post.data();\r\n    return postData;\r\n  }\r\n\r\n  \r\n\r\n  async createPost(post){\r\n    const storageRef = firebase.storage().ref();\r\n    const storageChild = storageRef.child(post.cover.name);\r\n    const postCover = await storageChild.put(post.cover);//upload\r\n    const downloadURL = await storageChild.getDownloadURL();//download\r\n    const fileRef = postCover.ref.location.path;\r\n\r\n    let newPost = {\r\n      tittle: post.tittle,\r\n      content: post.content,\r\n      cover: downloadURL,\r\n      fileref: fileRef\r\n    }\r\n\r\n    const firestorePost = await firebase.firestore().collection(\"Posts\").add(newPost).catch(err => {\r\n      console.log(err);\r\n      return err;\r\n    });\r\n    return firestorePost;\r\n  }\r\n\r\n  async updatePost(postid, postData){\r\n    if(postData[\"cover\"]){\r\n\r\n    const storageRef = firebase.storage().ref();\r\n    const storageChild = storageRef.child(postData.cover.name);\r\n    const postCover = await storageChild.put(postData.cover);//upload\r\n    const downloadURL = await storageChild.getDownloadURL();//download\r\n    const fileRef = postCover.ref.location.path;\r\n\r\n    await storageRef.child(postData[\"oldcover\"]).delete().catch(err => {\r\n      console.log(err);\r\n    });\r\n\r\n    let updatedPost = {\r\n      tittle: postData.tittle,\r\n      content: postData.content,\r\n      cover: downloadURL,\r\n      fileref: fileRef\r\n\r\n    }\r\n\r\n    const post = await firebase.firestore().collection(\"Posts\").doc(postid).set(updatedPost, {merge: true}).catch(err => {\r\n      console.log(err);\r\n    });\r\n    return post;\r\n    \r\n    }else{\r\n      const post = await firebase.firestore().collection(\"Posts\").doc(postid).set(postData, {merge: true}).catch(err => {\r\n        console.log(err);\r\n      });\r\n      return post;\r\n    }\r\n  }\r\n\r\n  async deletePost(postid, fileref){\r\n    const storageRef = firebase.storage().ref();\r\n    await storageRef.child(fileref).delete().catch(err => {\r\n      console.log(err);\r\n    });\r\n    console.log(\"Image Deleted\");\r\n    const post = await firebase.firestore().collection(\"Posts\").doc(postid).delete().catch(err => {\r\n      console.log(err)\r\n    });\r\n    console.log(\"Post Deleted\");\r\n\r\n    return post;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default new Firebase();\r\n\r\n","export const firebaseAuth = (state, action) => {\r\n    switch(action.type) {\r\n        case \"SIGNIN\":\r\n            return {...state, user: action.payload}\r\n\r\n            case \"LOGIN\":\r\n            return {...state, user: action.payload}\r\n\r\n            case \"LOGOUT\":\r\n            return {...state, user: action.payload}\r\n\r\n            default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\n// Firebaseauth Reducer\r\nimport { firebaseAuth } from \"../reducers/authReducer\";\r\n\r\n\r\nexport const Auth = React.createContext();\r\nconst initialState = {\r\n    user: {}\r\n}\r\n\r\nexport const AuthProvider = ( props ) => {\r\n\r\n    const [state, dispatch] = React.useReducer( firebaseAuth, initialState );\r\n    const value = {state, dispatch};\r\n\r\n    return <Auth.Provider value={value}>\r\n        {props.children}\r\n    </Auth.Provider>\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport firebase from \"../firebase/config\";\r\nimport {Auth} from \"../Context/authContext\";\r\n\r\nconst Nav = (props) => {\r\n\r\n    const [userState, setUserState] = useState(null);\r\n    const [userEmail, setUserEmail] = useState(\"\");\r\n\r\n    const {state, dispatch} = React.useContext(Auth);\r\n\r\n    useEffect(() => {\r\n\r\n        firebase.getUserState().then(user => {\r\n            if(user){\r\n                setUserState(user);\r\n                setUserEmail(user.email);\r\n            }\r\n        });\r\n    });\r\n\r\n    const logout = () => {\r\n        firebase.logout();\r\n        setUserState(null);\r\n        props.history.replace(\"/login\");\r\n        return dispatch({\r\n            type: \"LOGOUT\",\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    let buttons;\r\n    if(userState != null || state.user.hasOwnProperty(\"user\")){\r\n        buttons = (\r\n            <React.Fragment>\r\n                <li>{userEmail}</li>\r\n                <li><button className=\"logout\" onClick={logout}>LogOut</button></li>\r\n            </React.Fragment>\r\n        )\r\n    }else{\r\n        buttons = (\r\n            <React.Fragment>\r\n                <li><Link to=\"/signin\">SignIn</Link></li>\r\n                <li><Link to=\"/login\">LogIn</Link></li>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n    return(\r\n        <nav>\r\n            <ul>\r\n                <li><Link to=\"/\">Factorial</Link></li>\r\n            </ul>\r\n            <ul>\r\n                <li><Link to=\"/create\">New Post</Link></li>\r\n                {buttons}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default withRouter(Nav);","export const posts = (state, action) => {\r\n    switch(action.type){\r\n        case \"FETCH_POSTS\":\r\n            return{...state, posts: action.payload}\r\n\r\n            default:\r\n                return state;\r\n    }\r\n}","import React from \"react\";\r\nimport {posts} from \"../reducers/postsReducer\";\r\n\r\nexport const Posts = React.createContext();\r\nconst initialState = {\r\n    posts: []\r\n}\r\n\r\nexport const PostsProvider = (props) => {\r\n    const [state, dispatch] = React.useReducer(posts, initialState);\r\n    const value = { state, dispatch };\r\n\r\n    return <Posts.Provider value={value}>\r\n        {props.children}\r\n    </Posts.Provider>\r\n}","import React, {useEffect} from \"react\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport firebase from \"../firebase/config\";\r\nimport \"../index.css\";\r\n\r\nimport { Posts } from \"../Context/postsContext\";\r\n\r\nconst Main = () => {\r\n\r\n    const { state, dispatch } = React.useContext(Posts);\r\n\r\n    const getPosts = async() => {\r\n       // let _posts = [];\r\n        const postsArray = await firebase.getPosts().catch(err => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n        /*\r\n        postsArray.forEach(doc => {\r\n            _posts.push({id:doc.id, data:doc.data});\r\n        });\r\n        */\r\n\r\n        return dispatch({\r\n            type: \"FETCH_POSTS\",\r\n            payload: postsArray\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPosts();\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <header>\r\n                <div>\r\n                    <h1>React <br/> Post Upload <br/> App</h1>\r\n                </div>\r\n            </header>\r\n\r\n            <div className=\"posts\">\r\n                {state.posts.map(post => {\r\n                    return (\r\n                        <div className=\"post\" key={post.id}>\r\n                            <Link to={\"post/\" + post.id}>\r\n                                <div style={{backgroundImage: \"url(\" + post.data.cover +\")\"}}/>\r\n                            </Link>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(Main);","import React, {useState} from 'react';\r\nimport firebase from \"../firebase/config\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {Auth} from \"../Context/authContext\";\r\n\r\nconst Signin = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [ routeRedirect, setRouteRedirect ] = useState(false);\r\n\r\n    const {state, dispatch} = React.useContext(Auth);\r\n\r\n    const signin = async(e) => {\r\n        console.log(state)\r\n        e.preventDefault();\r\n        \r\n        let response = await firebase.signin(email, password);\r\n        if(response.hasOwnProperty(\"message\")){\r\n            console.log(response.message);\r\n        }else{\r\n            //console.log(response.user);\r\n            setRouteRedirect(true);\r\n            return dispatch({\r\n                type: \"SIGNIN\",\r\n                payload: response\r\n            })\r\n        }        \r\n    }\r\n\r\n    const redirect = routeRedirect;\r\n    if(redirect) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n\r\n    return (\r\n       <React.Fragment>\r\n\r\n          <form onSubmit={signin}>\r\n              <p>Create Account</p>\r\n\r\n              <label htmlFor=\"email\">Email:</label>\r\n              <input type=\"email\" name=\"email\" onChange= {(e) => setEmail(e.target.value)} />\r\n\r\n              <label htmlFor=\"password\">Password:</label>\r\n              <input type=\"password\" name=\"password\" onChange= {(e) => setPassword(e.target.value)} />\r\n\r\n              <input type=\"submit\" value=\"Create account\" />\r\n\r\n          </form>\r\n       </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Signin;\r\n","import React, {useState} from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport firebase from \"../firebase/config\";\r\nimport {Auth} from \"../Context/authContext\";\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const [ email, setEmail ] = useState(\"\");\r\n    const [ password, setPassword ] = useState(\"\");\r\n    const [ routeRedirect, setRouteRedirect ] = useState(false);\r\n\r\n    const { state, dispatch } = React.useContext(Auth);\r\n\r\n    const login = async(e) => {\r\n        e.preventDefault();\r\n        let response = await firebase.login(email, password);\r\n        if(response.hasOwnProperty(\"message\")){\r\n            console.log(response.message);\r\n        }else{\r\n            //console.log(response.user);\r\n            setRouteRedirect(true);\r\n            return dispatch({\r\n                type: \"LOGIN\",\r\n                payload: response.user\r\n            });   \r\n        }\r\n    }\r\n\r\n    const redirect = routeRedirect;\r\n    if(redirect) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return(\r\n\r\n        <React.Fragment>\r\n\r\n          <form onSubmit={login}>\r\n              <p>Welcome Back</p>\r\n\r\n              <label htmlFor=\"email\">Email:</label>\r\n              <input type=\"email\" name=\"email\" onChange= {(e) => setEmail(e.target.value)} />\r\n\r\n              <label htmlFor=\"password\">Password:</label>\r\n              <input type=\"password\" name=\"password\" onChange= {(e) => setPassword(e.target.value)} />\r\n\r\n              <input type=\"submit\" value=\"Login\" />\r\n\r\n          </form>\r\n       </React.Fragment>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Login;","import React ,{ useEffect, useState } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport firebase from \"../firebase/config\";\r\n\r\nconst Create = (props) => {\r\n    const [tittle, setTittle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [cover, setCover] = useState(\"\");\r\n    const [isBusy, setIsBusy] = useState(false);\r\n    const [routeRedirect, setRedirect] = useState(false);\r\n\r\n    const addPost = async(e) => {\r\n        e.preventDefault();\r\n        setIsBusy(true);\r\n\r\n        let post = {\r\n            tittle,\r\n            content,\r\n            cover: cover[0]\r\n        }\r\n\r\n        await firebase.createPost(post).then(() => {\r\n            console.log(\"post created succesfully\");\r\n            setIsBusy(false);\r\n            setRedirect(true);\r\n        }).catch(err => {\r\n            console.log(err);\r\n            setIsBusy(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        firebase.getUserState().then(user => {\r\n            if(!user){\r\n                props.history.replace(\"/login\");\r\n            }\r\n        })\r\n    })\r\n\r\n    const redirect = routeRedirect;\r\n    if(redirect){\r\n        return <Redirect to=\"/\" />  \r\n    }\r\n\r\n    let createForm;\r\n    if(isBusy){\r\n        createForm = (\r\n            <div className=\"processing\">\r\n                <p>Request is being processed</p>\r\n                <div className=\"loader\">Loading...</div>\r\n            </div>\r\n        )\r\n    }else{\r\n        createForm = (\r\n            <form onSubmit={addPost}>\r\n                <p>Create a new post</p>\r\n\r\n                <label htmlFor=\"tittle\">Post Tittle:</label>\r\n                <input type=\"text\" name=\"tittle\" onChange={(e) => setTittle(e.target.value)}/>\r\n\r\n                <label htmlFor=\"content\">Post Content:</label>\r\n                <textarea name=\"content\" onChange={(e) => setContent(e.target.value)}></textarea>\r\n\r\n                <label htmlFor=\"cover\">Cover:</label>\r\n                <input type=\"file\" onChange={(e) => setCover(e.target.files)}/>\r\n\r\n                <input type=\"submit\" value=\"create post\"/>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {createForm}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withRouter(Create);","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport firebase from \"../firebase/config\";\r\n\r\nconst Post = (props) => {\r\n\r\n    const [timer, setTimer] = useState(false);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [userState, setUserState] = useState(false);\r\n    const [isBusy, setIsBusy] = useState(false);\r\n    const [post, setPost] = useState(\"\");\r\n\r\n    const tittleRef = useRef(null);\r\n    const contentRef = useRef(null);\r\n    const fileRef = useRef(null);\r\n\r\n    const [postid, setPostId] = useState(\"\");\r\n    const [routeRedirect, setRedirect] = useState(false);\r\n\r\n    const getPost = async(postid) =>{\r\n        const _post = await firebase.getPost(postid).catch(err => {\r\n            console.log(err);\r\n            return err;\r\n        });\r\n\r\n        setPost(_post);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimer(true);\r\n        setPostId(props.match.params.id);\r\n        getPost(props.match.params.id);\r\n\r\n        firebase.getUserState().then(user => {\r\n            if(user){\r\n                setUserState(user);\r\n            }\r\n        });\r\n\r\n        setTimeout(() => setTimer(false), 1000);\r\n\r\n    }, [props.match.params.id]);\r\n\r\n    const redirect = routeRedirect;\r\n    if(redirect){\r\n        return <Redirect to=\"/\" />  \r\n    }\r\n\r\n\r\n    let currentPost;\r\n    let editButton;\r\n    let deleteButton;\r\n\r\n    const updateCurrentPost = (e) => {\r\n        e.preventDefault();\r\n        setIsBusy(true);\r\n\r\n        const _post = {\r\n            tittle: tittleRef.current.value,\r\n            content: contentRef.current.value\r\n        }\r\n\r\n        if(fileRef.current.files.length > 0){\r\n            _post[\"cover\"] = fileRef.current.files[0];\r\n            _post[\"oldcover\"] = post.fileref;\r\n        }\r\n\r\n        firebase.updatePost(postid, _post).then(() => {\r\n            console.log(\"Post Updated\");\r\n            setIsBusy(false);\r\n            setRedirect(true);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode);\r\n    }\r\n\r\n    const deleteCurrentPost = () => {\r\n        //delete post\r\n        firebase.deletePost(postid, post.fileref)\r\n        .then(() => {\r\n            setRedirect(true);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    let updateForm;\r\n    if(editMode){\r\n        deleteButton = <button className=\"delete\" onClick={(e) => deleteCurrentPost()}>Delete Post</button>\r\n\r\n        if(isBusy){\r\n            updateForm = (\r\n                <div className=\"processing\">\r\n                 <p>Request is being processed</p>\r\n                 <div className=\"loader\">Loading...</div>\r\n            </div>\r\n            )\r\n        }else{updateForm = (\r\n            <React.Fragment>\r\n             <form className=\"editForm\" onSubmit={updateCurrentPost}>\r\n                <p>Update the current post</p>\r\n\r\n                <label htmlFor=\"tittle\">Post Tittle:</label>\r\n                <input type=\"text\" name=\"tittle\" ref={tittleRef} defaultValue={post.tittle}/>\r\n\r\n                <label htmlFor=\"content\">Post Content:</label>\r\n                <textarea name=\"content\" ref={contentRef} defaultValue={post.content}></textarea>\r\n\r\n                <label htmlFor=\"cover\">Cover:</label>\r\n                <input type=\"file\" ref={fileRef}/>\r\n\r\n                <input type=\"submit\" value=\"update post\"/>\r\n             </form>\r\n\r\n             {deleteButton}\r\n            </React.Fragment>\r\n         )\r\n       }\r\n    }\r\n\r\n    if(timer){\r\n        currentPost = (\r\n            <div className=\"processing\">\r\n             <p>Request is being processed</p>\r\n             <div className=\"loader\">Loading...</div>\r\n        </div>\r\n        )\r\n    }else{\r\n\r\n        if(userState){\r\n            editButton = <button className=\"edit\" onClick={(e) => toggleEditMode()}>Edit Post</button>\r\n        }\r\n\r\n        currentPost = (\r\n        <div className=\"single\">\r\n            <img src={post.cover} alt=\"post cover\"/>\r\n            <h2>{post.tittle}</h2>\r\n            <div>{post.content}</div>\r\n            {editButton}\r\n            {updateForm}\r\n        </div>\r\n     )\r\n   }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            {currentPost}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Post; ","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\n//App Components\r\nimport Main from \"./App/Main\";\r\nimport Signin from \"./App/Signin\";\r\nimport Login from \"./App/Login\";\r\nimport Create from \"./App/Create\";\r\nimport Post from \"./App/Post\";\r\n\r\nconst Routes = () => (\r\n\r\n    <Switch>\r\n        <Route exact path=\"/\" component = {Main} /> \r\n        <Route exact path=\"/signin\" component = {Signin} /> \r\n        <Route exact path=\"/login\" component = {Login} /> \r\n        <Route exact path=\"/create\" component = {Create} />\r\n        <Route exact path=\"/post/:id\" component = {Post} />\r\n    </Switch>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\nimport Nav from \"./App/Nav\";\nimport Routes from \"./routes\";\nimport './app.css';\n\n\n  \n\nconst App = () => {\n  return (\n    <div className=\"App\">\n\n    <Nav/>\n    <main>\n      <Routes/>\n    </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AuthProvider } from \"./Context/authContext\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { PostsProvider } from \"./Context/postsContext\";\n\nReactDOM.render(\n\n    <BrowserRouter>\n       <AuthProvider>\n           <PostsProvider>\n              <App />\n           </PostsProvider>\n        </AuthProvider>\n    </BrowserRouter>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}